#!/bin/bash
clear
# Ignorar Ctrl‑C
trap '' INT

# ---------------------- Funciones auxiliares ----------------------------

ip2int() {
    local IFS=.
    read -r a b c d <<< "$1"
    echo $(( (a << 24) + (b << 16) + (c << 8) + d ))
}

ip_in_cidr() {
    local ip="$1" cidr="$2"
    local base bits ip_int base_int mask
    base=${cidr%/*}; bits=${cidr#*/}
    ip_int=$(ip2int "$ip")
    base_int=$(ip2int "$base")
    mask=$(( 0xFFFFFFFF << (32 - bits) & 0xFFFFFFFF ))
    (( (ip_int & mask) == (base_int & mask) ))
}

get_route_for_ip() {
    local ip="$1"
    ip route get "$ip" 2>/dev/null | awk '{print $3; exit}'
}

print_banner() {
    echo "=============== Comandos Permitidos ==============="
    for cmd in "${allowed_commands[@]}"; do
       printf "  - %s\n" "$cmd"
    done
    echo "==================================================="
}

print_help() {
    cat <<EOF
================= Restricted Shell =================
Este shell permite ejecutar los siguientes comandos:
  ping       - Enviar paquetes ICMP.
  ssh        - Acceder a otros servidores vía SSH.
  plink      - Herramienta similar a ssh.
  telnet     - Conectar a servicios mediante Telnet.
  tracepath  - Trazar ruta de red a un destino.
  mtr        - Combinación de ping y traceroute.
  exit       - Salir del shell.
  help       - Mostrar esta ayuda.
------------------------------------------------------
Las restricciones de acceso se aplican según políticas internas.
------------------------------------------------------
EOF
}

# ---------------------- Configuración Inicial ----------------------------

# Fuente de IP de quien se conecta
if [[ -n "$SSH_CONNECTION" ]]; then
    IP=${SSH_CONNECTION%% *}
else
    IP="localhost"
fi

allowed_commands=(ping ssh plink telnet tracepath mtr exit help)
restricted_networks=()            # CIDRs totalmente bloqueados
allowed_routes=("vlan199" "192.168.99.1" "vlan2")

# Abrimos descriptor 3 apuntando al terminal real
exec 3</dev/tty

print_banner

# ---------------------- Bucle Principal ----------------------------------

while true; do
    # Leer siempre desde /dev/tty; si falla (EOF), salimos limpiamente
    if ! read -u 3 -r -e -p "Restricted: $ " user_command; then
        echo
        echo "Adiós."
        break
    fi

    # Si comando vacío, volvemos a leer
    [[ -z "$user_command" ]] && continue

    # Loguear
    printf "[ %s ] Host: %s -- %s\n" "$(date +"%d/%m/%y %T")" "$IP" "$user_command" \
      >> /var/log/restricted_shell.log

    # Separar tokens
    read -r -a tokens <<< "$user_command"
    cmd=${tokens[0]}

    # Verificar comando permitido
    valid=false
    for a in "${allowed_commands[@]}"; do
        [[ "$cmd" == "$a" ]] && valid=true && break
    done
    if ! $valid; then
        echo "Comando \"$cmd\" no permitido."
        print_banner
        continue
    fi

    # Ayuda
    if [[ "$cmd" == "help" ]]; then
        print_help
        continue
    fi

    # Comprobación de IPs en argumentos
    disallowed=false
    for arg in "${tokens[@]:1}"; do
        ip_candidate="$arg"
        [[ "$ip_candidate" == *"@"* ]] && ip_candidate=${ip_candidate#*@}
        [[ "$ip_candidate" == *":"* ]] && ip_candidate=${ip_candidate%%:*}
        if [[ "$ip_candidate" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # CIDR bloqueados
            for net in "${restricted_networks[@]}"; do
                ip_in_cidr "$ip_candidate" "$net" && {
                    echo "Acceso a $ip_candidate no permitido."
                    disallowed=true
                    break 2
                }
            done
            # Ruta de salida
            route=$(get_route_for_ip "$ip_candidate")
            route_ok=false
            for ar in "${allowed_routes[@]}"; do
                [[ "$route" == "$ar" ]] && { route_ok=true; break; }
            done
            if ! $route_ok; then
                echo "No se permite salir por la ruta $route."
                disallowed=true
                break
            fi
        fi
    done
    $disallowed && continue

    # Salir del shell
    if [[ "$cmd" == "exit" ]]; then
        exit 0
    fi

    # Ejecutar comando real
    "${tokens[@]}"
done
