#!/bin/bash
# ---------------------------------------------------------------------------
# Generador interactivo de archivo sshd_config
#
# Este script permite configurar de forma interactiva el servicio SSH.
# - Se realizan respaldos del archivo original.
# - Se solicitan los valores de cada parámetro (mostrando descripción, opciones
#   y valores por defecto).
# - Se valida la entrada para evitar errores.
#
# Para aplicar la configuración, una vez revisado, copie el archivo generado
# sobre /etc/ssh/sshd_config y reinicie el servicio SSH.
#
# Ejemplo:
#   cp sshd_config.generated /etc/ssh/sshd_config && systemctl restart sshd
# ---------------------------------------------------------------------------

# El script debe ejecutarse como superusuario.
if [[ $EUID -ne 0 ]]; then
  echo "Este script debe ejecutarse con permisos de superusuario." >&2
  exit 1
fi

# Archivo de configuración actual y nombre del archivo generado
orig_config="/etc/ssh/sshd_config"
generated_file="sshd_config.generated"

echo "Bienvenido al generador interactivo de configuración SSH (sshd_config)."
echo "Este script le ayudará a crear un archivo de configuración adecuado."
echo "-----------------------------------------------------------------------"

# Realiza backup del archivo original, si existe.
if [[ -f "$orig_config" ]]; then
  backup_dest="/etc/ssh/sshd_config.bak.$(date +%Y%m%d%H%M%S)"
  echo "Realizando backup de $orig_config a $backup_dest"
  cp "$orig_config" "$backup_dest"
fi

# Declaración de parámetros
# Cada elemento tiene el formato:
#   Parametro|Descripción|ValorPorDefecto|Tipo (choice|number|text)|Opciones (si choice, separadas por coma)
params=(
  "AcceptEnv|Controla qué variables de entorno enviadas por el cliente son aceptadas. Útil para entornos específicos que requieren pasar configuraciones (ej: LANG, LC_*). Riesgo: Podría permitir inyección de variables maliciosas. Uso recomendado: Especificar solo las variables necesarias ej: 'AcceptEnv LANG LC_*'|no|choice|yes,no"
  "AddressFamily|Determina qué protocolos de red soporta SSH. 'inet' fuerza IPv4, 'inet6' IPv6, 'any' ambos. Ejemplo de uso: Restringir a IPv6 en entornos dual-stack para fomentar modernización. Advertencia: Deshabilitar IPv4 podría afectar compatibilidad con clientes antiguos|any|choice|inet,inet6,any"
  "AllowAgentForwarding|Habilita el reenvío del agente SSH para saltar entre hosts sin almacenar claves locales. Útil en arquitecturas de bastión. Riesgo: En cadenas de hosts comprometidos, un atacante podría usar el agente reenviado. Alternativa: Usar 'ssh -J' para saltos configurados|no|choice|yes,no"
  "AllowGroups|Lista de grupos UNIX permitidos para conexión SSH (separados por espacios). Ejemplo: 'AllowGroups sshusers developers'. Mejor práctica: Combinar con DenyGroups para acceso granular. Requiere actualizar grupos de usuarios en el sistema| |text|"
  "AllowTcpForwarding|Controla el reenvío de puertos TCP. Valores: 'yes' (total), 'no' (bloqueado), 'local' (solo reenvío local), 'remote' (solo remoto). Riesgo: Puertos abiertos podrían exponer servicios internos. Uso seguro: Desactivar en servidores con acceso público|no|choice|yes,no"
  "AllowUsers|Filtra usuarios permitidos para SSH (ej: 'AllowUsers user1 admin@192.168.1.*'). Soporte de patrones: Usar * y ? para coincidencias. Nota: Tiene precedencia sobre DenyUsers. Ideal para servidores con múltiples cuentas| |text|"
  "AuthorizedKeysFile|Ruta personalizada para claves públicas autorizadas. Rutas absolutas o relativas a ~/.ssh. Ejemplos avanzados: Incluir directorios dinámicos (ej: '/etc/ssh/authorized_keys/%u') o integración con LDAP. Permisos recomendados: 600 para archivos, 700 para directorios|.ssh/authorized_keys|text|"
  "Banner|Muestra un mensaje legal/advocatorio pre-autenticación (ej: /etc/issue.net). Requisitos: El archivo debe ser legible por el usuario sshd. Buenas prácticas: Incluir aviso de monitoreo según leyes locales (ej: GDPR). Advertencia: Evitar información de versión del servidor|none|text|"
  "ChallengeResponseAuthentication|Habilita métodos 2FA como Google Authenticator o Duo Security. Depende de PAM (UsePAM yes). Configuración típica: Combinar con autenticación por clave para MFA. Requiere: Módulos PAM configurados correctamente|yes|choice|yes,no"
  "ChrootDirectory|Aísla usuarios en jaulas chroot (requiere permisos estrictos: root-owned, no writable). Ejemplo: 'ChrootDirectory /var/www/jail'. Limitaciones: Necesita bibliotecas esenciales en el jail. Alternativa moderna: Usar namespaces con containers| |text|"
  "Ciphers|Lista de cifrados permitidos ordenados por preferencia. Cifrados recomendados (2023): aes256-gcm@openssh.com,chacha20-poly1305@openssh.com. Peligrosos: arcfour, cbc. Deprecados: Blowfish. Verificar compatibilidad con clientes antiguos|aes128-ctr,aes192-ctr,aes256-ctr|text|"
  "ClientAliveInterval|Segundos entre mensajes keep-alive (0=desactiva). Combinar con ClientAliveCountMax para tiempo total: Interval*CountMax. Ejemplo: 300 + Max 3 = 15m de inactividad. Cuidado: Valores bajos desconectan conexiones lentas|0|number|"
  "ClientAliveCountMax|Número de intentos keep-alive fallidos antes de desconectar. Mecanismo crítico para limpiar conexiones colgadas. En balanceadores: Aumentar si hay cortes intermitentes|3|number|"
  "Compression|Compresión de datos (yes/no/delayed). 'delayed' inicia compresión post-autenticación. Beneficio: Útil en conexiones lentas. Riesgo: BREACH attack en texto plano. Alternativa: Usar compresión a nivel de transporte (VPN)|delayed|choice|yes,no,delayed"
  "DenyGroups|Lista negativa de grupos bloqueados para SSH. Ejemplo: 'DenyGroups temporales contractors'. Orden de evaluación: Allow/Deny Users -> Allow/Deny Groups. Estrategia: Lista blanca (Allow) más segura que lista negra| |text|"
  "DenyUsers|Bloquea usuarios específicos, incluso si están en AllowUsers. Sintaxis: 'DenyUsers root admin*'. Caso especial: 'DenyUsers *' (todos) anulado por AllowUsers. Uso típico: Bloquear cuentas de servicio| |text|"
  "ForceCommand|Ejecuta comando específico ignorando lo solicitado por el cliente. Ejemplos: Limitar a rsync/sftp, o 'ForceCommand /usr/bin/safe-shell'. Combinar con Match para restricciones granulars| |text|"
  "GatewayPorts|Permite a hosts remotos conectar a puertos reenviados (binding en 0.0.0.0). Caso de uso: Exponer servicios internos a Internet via SSH -R. Riesgo: Exposición accidental de puertos|no|choice|yes,no"
  "GSSAPIAuthentication|Autenticación mediante Kerberos/Active Directory. Requiere: Configuración de realm y tickets válidos. Ventaja: Single Sign-On en entornos corporativos. Dependencias: Librerías GSSAPI instaladas|no|choice|yes,no"
  "GSSAPICleanupCredentials|Elimina tickets Kerberos al cerrar sesión. Seguridad: Previene reutilización de credenciales. En entornos AD: Mantener yes para cumplir con políticas de tickets efímeros|yes|choice|yes,no"
  "HostbasedAuthentication|Autenticación basada en clave del host (similar a .rhosts). Riesgo histórico: Vulnerable a suplantación IP. Requiere: 'HostbasedAuthentication yes' + 'EnableSSHKeysign yes' en cliente|no|choice|yes,no"
  "HostbasedUsesNameFromPacketOnly|Usa nombre de host del paquete TCP en vez de DNS inverso. Mitigación: Previene ataques donde el DNS está comprometido. Recomendado: yes en entornos no confiables|no|choice|yes,no"
  "HostKey|Ruta de claves privadas del host. Buenas prácticas: Usar tipos modernos (ed25519), proteger permisos (600). Rotación: Generar nuevas claves periódicamente y actualizar known_hosts|/etc/ssh/ssh_host_rsa_key|text|"
  "IgnoreRhosts|Ignora archivos ~/.rhosts y ~/.shosts. Seguridad crítica: Los archivos rhosts son un método de autenticación obsoleto e inseguro. Siempre mantener en yes|yes|choice|yes,no"
  "IgnoreUserKnownHosts|Evita usar ~/.ssh/known_hosts del usuario. Caso de uso: Servidores efímeros en cloud donde las claves cambian frecuentemente. Advertencia: Deshabilita protección contra MitM|no|choice|yes,no"
  "KerberosAuthentication|Habilita autenticación Kerberos (requiere realm configurado y kinit). Integración: Usar con tickets renovables y KDC confiable. Limitación: Depende de sincronización de tiempo (NTP)|no|choice|yes,no"
  "KerberosGetAFSToken|Obtiene tokens AFS para sistemas de archivos distribuidos. Configuración especializada: Entornos académicos/laboratorios con AFS/Kerberos|no|choice|yes,no"
  "KerberosOrLocalPasswd|Permite fallback a contraseña local si Kerberos falla. Seguridad: No recomendado, deshabilita para forzar autenticación centralizada|yes|choice|yes,no"
  "KerberosTicketCleanup|Destruye tickets al cerrar sesión. Fundamental en estaciones compartidas. Para sesiones persistentes: Configurar renewal en krb5.conf|yes|choice|yes,no"
  "KeyRegenerationInterval|Intervalo para regenerar claves efímeras (solo SSH1). SSH2 usa claves persistentes. Valor típico: 1h (3600s). SSH1 está obsoleto: Migrar a SSH2|1h|text|"
  "ListenAddress|Dirección IP específica para escuchar conexiones. Ejemplos: Restringir a interfaz interna ('ListenAddress 10.0.0.1') o IPv6 ('ListenAddress ::1'). Múltiples entradas: Usar directivas múltiples|0.0.0.0|text|"
  "LoginGraceTime|Tiempo máximo para completar autenticación (ej: '30s' o '2m'). En ataques DDoS: Reducir a 30-60 segundos. Cuidado: Afecta a clientes con conexiones lentas|2m|text|"
  "LogLevel|Detalle de logging (DEBUG3= máximo). Producción: INFO o VERBOSE. Auditoría: Habilitar logs detallados y enviar a SIEM. Advertencia: Niveles DEBUG impactan rendimiento|INFO|choice|QUIET,FATAL,ERROR,INFO,VERBOSE,DEBUG,DEBUG1,DEBUG2,DEBUG3"
  "MACs|Algoritmos de Integridad (Message Authentication Codes). Recomendados: hmac-sha2-512-etm@openssh.com. Peligrosos: MD5, SHA1. Orden afecta preferencia: Primero el más seguro|hmac-sha2-256,hmac-sha2-512|text|"
  "Match|Condicional para aplicar configuraciones a usuarios/hosts/grupos. Ejemplo: 'Match User ansible Address 192.168.*' aplica ForceCommand solo para ese contexto. Poderoso: Permite políticas granulares| |text|"
  "MaxAuthTries|Límite de intentos de autenticación por conexión. Recomendado: 3-4 para bloquear fuerza bruta. Importante: Cuenta intentos por método (ej: 2 claves fallidas + 1 contraseña = 3)|6|number|"
  "MaxSessions|Número máximo de sesiones multiplexadas por conexión. Afecta a usuarios que usan ControlMaster. Mitigación DoS: Limitar a 5-10 por usuario|10|number|"
  "MaxStartups|Controla conexiones simultáneas no autenticadas. Formato: start:rate:full (ej: '10:30:60'). Defensa contra ataques de saturación: Mantener números bajos en servidores públicos| |text|"
  "PasswordAuthentication|Permite autenticación por contraseña. Mejor práctica: Deshabilitar (no) y usar claves públicas. Excepción: Entornos con 2FA (ej: Google Authenticator + contraseña)|yes|choice|yes,no"
  "PermitEmptyPasswords|Permite cuentas sin contraseña. Extremadamente peligroso: Solo para cuentas de sistema especiales (ej: backup con claves)|no|choice|yes,no"
  "PermitOpen|Restringe destinos de reenvío de puertos. Sintaxis: 'PermitOpen host:port'. Ejemplo: 'PermitOpen 192.168.1.100:80 localhost:3306'. Seguridad: Limita pivoting interno|localhost:80|text|"
  "PermitRootLogin|Controla acceso root. Valores seguros: 'prohibit-password' (solo claves) o 'no'. Emergencia: 'without-password' permite claves + autenticación interactiva|no|choice|yes,no,prohibit-password,forced-commands-only"
  "PermitTunnel|Permite tuneles VPN sobre SSH (ethertap). Requisito: Privilegios de cap_net_admin. Caso de uso: Conexiones site-to-site seguras|no|choice|yes,no"
  "PermitUserEnvironment|Permite a usuarios configurar variables via ~/.ssh/environment. Riesgo: Inyección de LD_PRELOAD o rutas maliciosas. Alternativa: Usar AcceptEnv selectivo|no|choice|yes,no"
  "PidFile|Ruta personalizada del archivo PID. Necesario en sistemas con múltiples instancias sshd. Servidores múltiples: Usar diferentes PidFile y puertos|/run/sshd.pid|text|"
  "Port|Puerto de escucha. Seguridad: Cambiar del 22 predeterminado (reduce escaneos). Firewall: Asegurar filtrado por IP. Múltiples puertos: Usar múltiples directivas Port|22|number|"
  "PrintLastLog|Muestra último acceso exitoso. Privacidad: Deshabilitar en entornos multi-usuario. Auditoría: Combinar con LastLog|yes|choice|yes,no"
  "PrintMotd|Muestra Message of the Day tras login. Personalización: Usar /etc/motd. Entornos corporativos: Incluir políticas de uso|yes|choice|yes,no"
  "Protocol|Versiones de protocolo soportadas. SSH1 es inseguro: Usar exclusivamente '2'. Herencia: Algunos dispositivos IoT aún requieren SSH1 (actualizar si es posible)|2|choice|1,2"
  "PubkeyAuthentication|Habilita autenticación por clave pública. Esencial para acceso seguro: Deshabilitar password authentication cuando esté activo|yes|choice|yes,no"
  "RhostsRSAAuthentication|Método obsoleto de autenticación (rhosts + RSA). Histórico: Vulnerable a spoofing IP. Deshabilitar salvo requerimientos legacy|no|choice|yes,no"
  "RSAAuthentication|Habilita autenticación RSA pura (SSH1). Obsoleto: Preferir ed25519/ECDSA en SSH2. Advertencia: Inseguro si se usa con claves cortas (<2048 bits)|yes|choice|yes,no"
  "ServerKeyBits|Longitud de clave para SSH1 (obsoleto). En SSH2, las claves del host se generan al instalar sshd. Buenas prácticas actuales: ed25519 (256 bits) o RSA (4096)|2048|number|"
  "StrictModes|Verifica permisos estrictos en archivos de usuario (~/.ssh, etc.). Crítico: Archivos world-writable causan rechazo de conexión. Error común: Permisos 644 en authorized_keys|yes|choice|yes,no"
  "Subsystem|Define subsistemas para SFTP/otros. Ejemplo: 'Subsystem sftp internal-sftp'. Configuraciones avanzadas: Chroot + SFTP para usuarios restringidos|sftp /usr/lib/openssh/sftp-server|text|"
  "SyslogFacility|Clasifica mensajes en syslog/rsyslog. Integración: Filtrar logs por facility en SIEM. Opción LOCAL0-7 para segregación personalizada|AUTH|choice|DAEMON,USER,AUTH,AUTHPRIV,LOCAL0-7"
  "TCPKeepAlive|Habilita keepalives TCP a nivel de sistema. Detecta caídas de red: Útil en conexiones NAT con timeout cortos. Contra: Puede mantener conexiones zombi|yes|choice|yes,no"
  "UseDNS|Realiza búsqueda DNS inversa para logs. Problemas: Demora en conexiones si DNS no responde. Seguridad: Previene fuga a través de PTR records|no|choice|yes,no"
  "UseLogin|Usa el comando login(1) para sesiones interactivas. Obsoleto: Incompatible con características modernas como SFTP. Mantener en 'no'|no|choice|yes,no"
  "UsePAM|Habilita autenticación mediante Pluggable Authentication Modules. Requerido para: 2FA, integración con LDAP/AD, límites de recursos (ulimit)|yes|choice|yes,no"
  "UsePrivilegeSeparation|Aísla procesos con menos privilegios. 'sandbox' (OpenSSH 6.1+) es más seguro. Seguridad: Mitiga vulnerabilidades de escalada de privilegios|sandbox|choice|yes,no,sandbox"
  "X11DisplayOffset|Evita conflictos en displays X11. Asigna displays desde este offset. Ejemplo: Offset 10 usa display 10,11,...|10|number|"
  "X11Forwarding|Habilita reenvío gráfico X11. Riesgo: X11 tiene vulnerabilidades históricas. Alternativa segura: Usar Xpra o Wayland|no|choice|yes,no"
  "X11UseLocalhost|Restringe X11 al localhost. Seguridad: Previene acceso remoto directo al X server. Tunelización: El tráfico igual viaja cifrado por SSH|yes|choice|yes,no"
  "XAuthLocation|Ruta personalizada a xauth (manejo de cookies X11). Normalmente autodetectado. Casos especiales: Sistemas sin xauth en PATH estándar| |text|"
  "KexAlgorithms|Algoritmos de intercambio de claves (Key Exchange). Modernos: curve25519-sha256. Evitar: diffie-hellman-group1-sha1. Orden preferencial: Más seguros primero| |text|"
  "AuthorizedKeysCommand|Script para obtener claves dinámicamente (ej: desde API). Ejemplo: Integración con HashiCorp Vault. Usuario: Debe tener permisos limitados| |text|" 
  "AuthorizedKeysCommandUser|Usuario privilegiado que ejecuta el comando de claves. Buenas prácticas: Usar usuario dedicado sin shell (ej: 'sshd-keyfetcher')| |text|"
)

# Función para solicitar y validar el valor de un parámetro.
prompt_parameter() {
  local param="$1"
  local description="$2"
  local def="$3"
  local type="$4"
  local choices="$5"
  local input

  echo "-----------------------------------------------------------------------"
  echo "Parámetro: $param"
  echo "Descripción: $description"
  if [[ "$def" == "<vacío>" ]]; then
    echo "Valor por defecto: (vacío)"
  else
    echo "Valor por defecto: $def"
  fi

  # Si es de tipo 'choice', se muestran las opciones.
  if [[ "$type" == "choice" && -n "$choices" ]]; then
    IFS=',' read -ra opts <<< "$choices"
    echo "Opciones disponibles:"
    local idx=1
    for opt in "${opts[@]}"; do
      echo "  $idx) $opt"
      ((idx++))
    done
    while true; do
      read -rp "Seleccione una opción (número) o presione Enter para usar el valor por defecto: " sel
      if [[ -z "$sel" ]]; then
        input="$def"
        break
      elif [[ "$sel" =~ ^[0-9]+$ ]] && (( sel >= 1 && sel <= ${#opts[@]} )); then
        input="${opts[$((sel-1))]}"
        break
      else
        echo "Entrada inválida. Intente nuevamente."
      fi
    done
  elif [[ "$type" == "number" ]]; then
    while true; do
      read -rp "Ingrese un número o presione Enter para usar el valor por defecto: " inp
      if [[ -z "$inp" ]]; then
        input="$def"
        break
      elif [[ "$inp" =~ ^[0-9]+$ ]]; then
        input="$inp"
        break
      else
        echo "Debe ingresar un valor numérico."
      fi
    done
  else
    # Para tipo texto, se acepta cualquier entrada (se usa el valor por defecto si está vacío)
    read -rp "Ingrese el valor o presione Enter para usar el valor por defecto: " inp
    if [[ -z "$inp" ]]; then
      input="$def"
    else
      input="$inp"
    fi
  fi

  # Para parámetros opcionales que pueden quedar vacíos, se conserva el valor "<vacío>" o se escribe nada.
  if [[ "$input" == "<vacío>" ]]; then
    input=""
  fi

  # Escribe la línea de configuración (se respeta la sintaxis: Clave [valor])
  if [[ -n "$input" ]]; then
    echo "$param $input" >> "$generated_file"
  else
    # Si el valor quedó vacío, se comenta la línea (el parámetro se omite)
    echo "# $param" >> "$generated_file"
  fi
}

# Crea (o limpia) el archivo generado.
> "$generated_file"
{
  echo "# Archivo generado interactivamente por el script"
  echo "# Fecha: $(date)"
  echo ""
} >> "$generated_file"

# Itera sobre cada parámetro y solicita su valor.
for entry in "${params[@]}"; do
  IFS='|' read -r param description def type choices <<< "$entry"
  prompt_parameter "$param" "$description" "$def" "$type" "$choices"
done

echo "-----------------------------------------------------------------------"
echo "Archivo de configuración generado: $generated_file"
echo "Revise el contenido y, si está correcto, aplíquelo:"
echo "  cp $generated_file /etc/ssh/sshd_config && systemctl restart sshd"
exit 0
